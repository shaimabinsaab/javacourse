import java.util.Random;
import java.util.Scanner;

public class Main {
    static Scanner s=new Scanner(System.in);
    public static void main(String[] args) {

        //the field that contain number is :
        //first row [0][1],[0][2],[0][4]
        //second row [2][0],[2][2],[2][4]
        //third row [4][0],[4][2],[4][4]

        //player=1,computer=0;

        char[][] myboard = {{'-', '|', '-', '|', '-'},
                            {'-', '+', '-', '+', '-'},
                            {'-', '|', '-', '|', '-'},
                            {'-', '+', '-', '+', '-'},
                            {'-', '|', '-', '|', '-'}};

        boolean gameover=false;
        while (!gameover){
            player(myboard);
            gameover=endofthegame(myboard);
            if(gameover){
                break;
            }
            computer(myboard);
            gameover=endofthegame(myboard);
            if(gameover){
                break;
            }
        }





    }

    public static void print(char[][] b){
        for (char[] row:b) {
            for (char field:row) {
                System.out.print(field);
            }System.out.println();

        }
        System.out.println();

    }

    public static void update(int place,int player,char[][]game){
        char var;

        if(player==1){
            var='X';
        }else{
            var='O';
        }

        switch (place){
            case 1:game[0][0]=var;
            print(game);
            break;

            case 2:game[0][2]=var;
            print(game);
            break;

            case 3:game[0][4]=var;
                print(game);
                break;

            case 4:game[2][0]=var;
                print(game);
                break;

            case 5:game[2][2]=var;
                print(game);
                break;

            case 6:game[2][4]=var;
                print(game);
                break;

            case 7:game[4][0]=var;
                print(game);
                break;

            case 8:game[4][2]=var;
                print(game);
                break;

            case 9:game[4][4]=var;
                print(game);
                break;
            default:
                break;


        }

    }

    public static void player(char [][] game){
        System.out.println("where would you like to play (1-9)");
        int chosen=s.nextInt();
        boolean result=validation(chosen,game);
        while (!result){
            System.out.println(chosen+" is not a valid move");
            System.out.println("where would you like to play (1-9)");
            chosen= s.nextInt();
            result=validation(chosen,game);
        }
        update(chosen,1,game);

    }

    public static boolean validation(int move,char[][]game) {
        switch (move) {
            case 1:
                if (game[0][0] == '-') {
                    return true;
                } else {
                    return false;
                }


            case 2:
                if (game[0][2] == '-') {
                    return true;
                } else {
                    return false;
                }

            case 3:
                if (game[0][4] == '-') {
                    return true;
                } else {
                    return false;
                }

            case 4:
                if (game[2][0] == '-') {
                    return true;
                } else {
                    return false;
                }

            case 5:
                if (game[2][2] == '-') {
                    return true;
                } else {
                    return false;
                }

            case 6:
                if (game[2][4] == '-') {
                    return true;
                } else {
                    return false;
                }

            case 7:
                if (game[4][0] == '-') {
                    return true;
                } else {
                    return false;
                }

            case 8:
                if (game[4][2] == '-') {
                    return true;
                } else {
                    return false;
                }

            case 9:
                if (game[4][4] == '-') {
                    return true;
                } else {
                    return false;
                }
            default:
                return false;

        }
    }

        public static void computer(char [][] game){
            Random randomMove=new Random();
            int chosen=randomMove.nextInt(9)+1;
            boolean result=validation(chosen,game);
            while (!result){
                chosen=randomMove.nextInt(9)+1;
                result=validation(chosen,game);
            }
            System.out.println("computer choose "+chosen);
            update(chosen,0,game);

        }

        public static boolean endofthegame(char[][]game) {
            if (game[0][0] == 'X' && game[0][2] == 'X' && game[0][4] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[0][0] == 'O' && game[0][2] == 'O' && game[0][4] == 'O') {
                System.out.println("computer is the winner");
                return true;

            }
            if (game[2][0] == 'X' && game[2][2] == 'X' && game[2][4] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[2][0] == 'O' && game[2][2] == 'O' && game[2][4] == 'O') {
                System.out.println("computer is the winner");
                return true;
            }
            if (game[4][0] == 'X' && game[4][2] == 'X' && game[4][4] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[4][0] == 'O' && game[4][2] == 'O' && game[4][4] == 'O') {
                System.out.println("computer is the winner");
                return true;
            }
            if (game[0][0] == 'X' && game[2][0] == 'X' && game[4][0] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[0][0] == 'O' && game[2][0] == 'O' && game[4][0] == 'O') {
                System.out.println("computer is the winner");
                return true;
            }
            if (game[0][2] == 'X' && game[2][2] == 'X' && game[4][2] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[0][2] == 'O' && game[2][2] == 'O' && game[4][2] == 'O') {
                System.out.println("computer is the winner");
                return true;
            }
            if (game[0][4] == 'X' && game[2][4] == 'X' && game[4][4] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[0][4] == 'O' && game[2][4] == 'O' && game[4][4] == 'O') {
                System.out.println("computer is the winner");
                return true;
            }
            if (game[0][0] == 'X' && game[2][2] == 'X' && game[4][4] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[0][0] == 'O' && game[2][2] == 'O' && game[4][4] == 'O') {
                System.out.println("computer is the winner");
                return true;
            }
            if (game[0][4] == 'X' && game[2][2] == 'X' && game[4][0] == 'X') {
                System.out.println("player is the winner");
                return true;
            }
            if (game[0][4] == 'O' && game[2][2] == 'O' && game[4][0] == 'O') {
                System.out.println("computer is the winner");
                return true;
            }
            if(game[0][0]!='-'&&game[0][2]!='-'&&game[0][4]!='-'&&game[2][0]!='-'&&game[2][2]!='-'&&
                    game[2][4]!='-'&&game[4][0]!='-'&&game[4][2]!='-'&&game[4][4]!='-'){
                System.out.println("the game has been finished with equality");
                return true;
            }
            return false;
        }


//closing tag
        }

